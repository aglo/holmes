!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AccessLog	holmes/accesslog.go	/^type AccessLog struct {$/;"	d
AccessLog	holmes/accesslog.go	/^type AccessLog struct {$/;"	t
ActiveCount	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) ActiveCount() int {$/;"	d
ActiveCount	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) ActiveCount() int {$/;"	f
Add	github.com/garyburd/redigo/redis/scan.go	/^func (args Args) Add(value interface{}) Args {$/;"	d
Add	github.com/garyburd/redigo/redis/scan.go	/^func (args Args) Add(value interface{}) Args {$/;"	f
AddFlat	github.com/garyburd/redigo/redis/scan.go	/^func (args Args) AddFlat(v interface{}) Args {$/;"	d
AddFlat	github.com/garyburd/redigo/redis/scan.go	/^func (args Args) AddFlat(v interface{}) Args {$/;"	f
AddIgnoreList	holmes/filter.go	/^func AddIgnoreList(redisConn RedisConn, accesslog AccessLog) {$/;"	d
AddIgnoreList	holmes/filter.go	/^func AddIgnoreList(redisConn RedisConn, accesslog AccessLog) {$/;"	f
AddWatchingList	holmes/filter.go	/^func AddWatchingList(redisConn RedisConn, accesslog AccessLog) {$/;"	d
AddWatchingList	holmes/filter.go	/^func AddWatchingList(redisConn RedisConn, accesslog AccessLog) {$/;"	f
AddWhiteList	holmes/filter.go	/^func AddWhiteList(redisConn RedisConn, accesslog AccessLog) {$/;"	d
AddWhiteList	holmes/filter.go	/^func AddWhiteList(redisConn RedisConn, accesslog AccessLog) {$/;"	f
AppendStruct	github.com/garyburd/redigo/redisx/struct.go	/^func AppendStruct(args []interface{}, src interface{}) []interface{} {$/;"	d
AppendStruct	github.com/garyburd/redigo/redisx/struct.go	/^func AppendStruct(args []interface{}, src interface{}) []interface{} {$/;"	f
Args	github.com/garyburd/redigo/redis/scan.go	/^type Args []interface{}$/;"	d
Args	github.com/garyburd/redigo/redis/scan.go	/^type Args []interface{}$/;"	t
BlockListLeftPop	holmes/redis.go	/^func (redisConn *RedisConn) BlockListLeftPop(list string, timeout int64) (string, string) {$/;"	d
BlockListLeftPop	holmes/redis.go	/^func (redisConn *RedisConn) BlockListLeftPop(list string, timeout int64) (string, string) {$/;"	f
BlockListRightPop	holmes/redis.go	/^func (redisConn *RedisConn) BlockListRightPop(list string, timeout int64) (string, string) {$/;"	d
BlockListRightPop	holmes/redis.go	/^func (redisConn *RedisConn) BlockListRightPop(list string, timeout int64) (string, string) {$/;"	f
Bool	github.com/garyburd/redigo/redis/reply.go	/^func Bool(reply interface{}, err error) (bool, error) {$/;"	d
Bool	github.com/garyburd/redigo/redis/reply.go	/^func Bool(reply interface{}, err error) (bool, error) {$/;"	f
Bytes	github.com/garyburd/redigo/redis/reply.go	/^func Bytes(reply interface{}, err error) ([]byte, error) {$/;"	d
Bytes	github.com/garyburd/redigo/redis/reply.go	/^func Bytes(reply interface{}, err error) ([]byte, error) {$/;"	f
Close	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Close() error {$/;"	d
Close	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Close() error {$/;"	f
Close	github.com/garyburd/redigo/redis/conn_test.go	/^func (t testConn) Close() error {$/;"	d
Close	github.com/garyburd/redigo/redis/conn_test.go	/^func (t testConn) Close() error {$/;"	f
Close	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Close() error {$/;"	d
Close	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Close() error {$/;"	f
Close	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Close() (err error) {$/;"	d
Close	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Close() (err error) {$/;"	f
Close	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) Close() error {$/;"	d
Close	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) Close() error {$/;"	f
Close	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Close() error { *c.open -= 1; return nil }$/;"	d
Close	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Close() error { *c.open -= 1; return nil }$/;"	f
Close	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Close() error {$/;"	d
Close	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Close() error {$/;"	f
Close	github.com/garyburd/redigo/redis/test_test.go	/^func (dummyClose) Close() error { return nil }$/;"	d
Close	github.com/garyburd/redigo/redis/test_test.go	/^func (dummyClose) Close() error { return nil }$/;"	f
CloseConn	holmes/redis.go	/^func CloseConn(c redis.Conn) {$/;"	d
CloseConn	holmes/redis.go	/^func CloseConn(c redis.Conn) {$/;"	f
CloseRedisConn	holmes/redis.go	/^func CloseRedisConn(redisConn RedisConn) {$/;"	d
CloseRedisConn	holmes/redis.go	/^func CloseRedisConn(redisConn RedisConn) {$/;"	f
Conn	github.com/garyburd/redigo/redis/redis.go	/^type Conn interface {$/;"	d
Conn	github.com/garyburd/redigo/redis/redis.go	/^type Conn interface {$/;"	t
ConnectRedis	holmes/redis.go	/^func ConnectRedis() redis.Conn {$/;"	d
ConnectRedis	holmes/redis.go	/^func ConnectRedis() redis.Conn {$/;"	f
ConnectRedisTimeout	holmes/redis.go	/^func ConnectRedisTimeout() redis.Conn {$/;"	d
ConnectRedisTimeout	holmes/redis.go	/^func ConnectRedisTimeout() redis.Conn {$/;"	f
DelWatchingList	holmes/filter.go	/^func DelWatchingList(redisConn RedisConn, accesslog AccessLog) {$/;"	d
DelWatchingList	holmes/filter.go	/^func DelWatchingList(redisConn RedisConn, accesslog AccessLog) {$/;"	f
Dial	github.com/garyburd/redigo/redis/conn.go	/^func Dial(network, address string) (Conn, error) {$/;"	d
Dial	github.com/garyburd/redigo/redis/conn.go	/^func Dial(network, address string) (Conn, error) {$/;"	f
DialTimeout	github.com/garyburd/redigo/redis/conn.go	/^func DialTimeout(network, address string, connectTimeout, readTimeout, writeTimeout time.Duration) (Conn, error) {$/;"	d
DialTimeout	github.com/garyburd/redigo/redis/conn.go	/^func DialTimeout(network, address string, connectTimeout, readTimeout, writeTimeout time.Duration) (Conn, error) {$/;"	f
Do	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Do(cmd string, args ...interface{}) (interface{}, error) {$/;"	d
Do	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Do(cmd string, args ...interface{}) (interface{}, error) {$/;"	f
Do	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Do(commandName string, args ...interface{}) (interface{}, error) {$/;"	d
Do	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Do(commandName string, args ...interface{}) (interface{}, error) {$/;"	f
Do	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Do(commandName string, args ...interface{}) (reply interface{}, err error) {$/;"	d
Do	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Do(commandName string, args ...interface{}) (reply interface{}, err error) {$/;"	f
Do	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Do(commandName string, args ...interface{}) (reply interface{}, err error) {$/;"	d
Do	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Do(commandName string, args ...interface{}) (reply interface{}, err error) {$/;"	f
Do	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Do(c Conn, keysAndArgs ...interface{}) (interface{}, error) {$/;"	d
Do	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Do(c Conn, keysAndArgs ...interface{}) (interface{}, error) {$/;"	f
DoFilter	holmes/filter.go	/^func DoFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
DoFilter	holmes/filter.go	/^func DoFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	f
Err	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Err() error {$/;"	d
Err	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Err() error {$/;"	f
Err	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Err() error {$/;"	d
Err	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Err() error {$/;"	f
Err	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Err() error   { return c.err }$/;"	d
Err	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Err() error   { return c.err }$/;"	f
ErrNil	github.com/garyburd/redigo/redis/reply.go	/^var ErrNil = errors.New("redigo: nil returned")$/;"	d
ErrNil	github.com/garyburd/redigo/redis/reply.go	/^var ErrNil = errors.New("redigo: nil returned")$/;"	v
ErrPoolExhausted	github.com/garyburd/redigo/redis/pool.go	/^var ErrPoolExhausted = errors.New("redigo: connection pool exhausted")$/;"	d
ErrPoolExhausted	github.com/garyburd/redigo/redis/pool.go	/^var ErrPoolExhausted = errors.New("redigo: connection pool exhausted")$/;"	v
Error	github.com/garyburd/redigo/redis/redis.go	/^func (err Error) Error() string { return string(err) }$/;"	d
Error	github.com/garyburd/redigo/redis/redis.go	/^func (err Error) Error() string { return string(err) }$/;"	f
Error	github.com/garyburd/redigo/redis/redis.go	/^type Error string$/;"	d
Error	github.com/garyburd/redigo/redis/redis.go	/^type Error string$/;"	t
ExampleArgs	github.com/garyburd/redigo/redis/scan_test.go	/^func ExampleArgs() {$/;"	d
ExampleArgs	github.com/garyburd/redigo/redis/scan_test.go	/^func ExampleArgs() {$/;"	f
ExampleBool	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleBool() {$/;"	d
ExampleBool	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleBool() {$/;"	f
ExampleDial	github.com/garyburd/redigo/redis/conn_test.go	/^func ExampleDial(x int) {$/;"	d
ExampleDial	github.com/garyburd/redigo/redis/conn_test.go	/^func ExampleDial(x int) {$/;"	f
ExampleInt	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleInt() {$/;"	d
ExampleInt	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleInt() {$/;"	f
ExamplePubSubConn	github.com/garyburd/redigo/redis/pubsub_test.go	/^func ExamplePubSubConn() {$/;"	d
ExamplePubSubConn	github.com/garyburd/redigo/redis/pubsub_test.go	/^func ExamplePubSubConn() {$/;"	f
ExampleScan	github.com/garyburd/redigo/redis/scan_test.go	/^func ExampleScan() {$/;"	d
ExampleScan	github.com/garyburd/redigo/redis/scan_test.go	/^func ExampleScan() {$/;"	f
ExampleScript	github.com/garyburd/redigo/redis/script_test.go	/^func ExampleScript(c redis.Conn, reply interface{}, err error) {$/;"	d
ExampleScript	github.com/garyburd/redigo/redis/script_test.go	/^func ExampleScript(c redis.Conn, reply interface{}, err error) {$/;"	f
ExampleString	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleString() {$/;"	d
ExampleString	github.com/garyburd/redigo/redis/reply_test.go	/^func ExampleString() {$/;"	f
Example_zpop	github.com/garyburd/redigo/redis/zpop_example_test.go	/^func Example_zpop() {$/;"	d
Example_zpop	github.com/garyburd/redigo/redis/zpop_example_test.go	/^func Example_zpop() {$/;"	f
Export	holmes/exporter.go	/^func Export(c chan int, holmesConfig *HolmesConfig) {$/;"	d
Export	holmes/exporter.go	/^func Export(c chan int, holmesConfig *HolmesConfig) {$/;"	f
Filter	holmes/filter.go	/^func Filter(c chan int) {$/;"	d
Filter	holmes/filter.go	/^func Filter(c chan int) {$/;"	f
Float64	github.com/garyburd/redigo/redis/reply.go	/^func Float64(reply interface{}, err error) (float64, error) {$/;"	d
Float64	github.com/garyburd/redigo/redis/reply.go	/^func Float64(reply interface{}, err error) (float64, error) {$/;"	f
Flush	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Flush() error {$/;"	d
Flush	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Flush() error {$/;"	f
Flush	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Flush() error {$/;"	d
Flush	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Flush() error {$/;"	f
Flush	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Flush() error {$/;"	d
Flush	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Flush() error {$/;"	f
GUIDFilter	holmes/filter.go	/^\/\/func GUIDFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
Get	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) Get() Conn {$/;"	d
Get	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) Get() Conn {$/;"	f
GetLog	holmes/accesslog.go	/^func GetLog(line string) AccessLog {$/;"	d
GetLog	holmes/accesslog.go	/^func GetLog(line string) AccessLog {$/;"	f
Go	github.com/garyburd/redigo/redis/doc.go	/^\/\/  Redis type          Go type$/;"	d
HashGet	holmes/redis.go	/^func (redisConn *RedisConn) HashGet(ht string, field string) string {$/;"	d
HashGet	holmes/redis.go	/^func (redisConn *RedisConn) HashGet(ht string, field string) string {$/;"	f
HashIncrby	holmes/redis.go	/^func (redisConn *RedisConn) HashIncrby(ht string, field string, increment int) int64 {$/;"	d
HashIncrby	holmes/redis.go	/^func (redisConn *RedisConn) HashIncrby(ht string, field string, increment int) int64 {$/;"	f
HashSet	holmes/redis.go	/^func (redisConn *RedisConn) HashSet(ht string, field string, value string) int64 {$/;"	d
HashSet	holmes/redis.go	/^func (redisConn *RedisConn) HashSet(ht string, field string, value string) int64 {$/;"	f
HolmesConfig	holmes/conf.go	/^type HolmesConfig struct {$/;"	d
HolmesConfig	holmes/conf.go	/^type HolmesConfig struct {$/;"	t
HttpCodeFilter	holmes/filter.go	/^func HttpCodeFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
HttpCodeFilter	holmes/filter.go	/^func HttpCodeFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	f
IPFilter	holmes/filter.go	/^\/\/func IPFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
InitRedisConf	holmes/redis.go	/^func InitRedisConf(holmesConfig *HolmesConfig) {$/;"	d
InitRedisConf	holmes/redis.go	/^func InitRedisConf(holmesConfig *HolmesConfig) {$/;"	f
InitUAParsers	holmes/ua_regexp.go	/^func InitUAParsers(pattern_file string) {$/;"	d
InitUAParsers	holmes/ua_regexp.go	/^func InitUAParsers(pattern_file string) {$/;"	f
Int	github.com/garyburd/redigo/redis/reply.go	/^func Int(reply interface{}, err error) (int, error) {$/;"	d
Int	github.com/garyburd/redigo/redis/reply.go	/^func Int(reply interface{}, err error) (int, error) {$/;"	f
Int64	github.com/garyburd/redigo/redis/reply.go	/^func Int64(reply interface{}, err error) (int64, error) {$/;"	d
Int64	github.com/garyburd/redigo/redis/reply.go	/^func Int64(reply interface{}, err error) (int64, error) {$/;"	f
ListLeftPop	holmes/redis.go	/^func (redisConn *RedisConn) ListLeftPop(list string) string {$/;"	d
ListLeftPop	holmes/redis.go	/^func (redisConn *RedisConn) ListLeftPop(list string) string {$/;"	f
ListLeftPush	holmes/redis.go	/^func (redisConn *RedisConn) ListLeftPush(list, item string) int64 {$/;"	d
ListLeftPush	holmes/redis.go	/^func (redisConn *RedisConn) ListLeftPush(list, item string) int64 {$/;"	f
ListLen	holmes/redis.go	/^func (redisConn *RedisConn) ListLen(list string) int64 {$/;"	d
ListLen	holmes/redis.go	/^func (redisConn *RedisConn) ListLen(list string) int64 {$/;"	f
ListRightPop	holmes/redis.go	/^func (redisConn *RedisConn) ListRightPop(list string) string {$/;"	d
ListRightPop	holmes/redis.go	/^func (redisConn *RedisConn) ListRightPop(list string) string {$/;"	f
ListRightPush	holmes/redis.go	/^func (redisConn *RedisConn) ListRightPush(list, item string) int64 {$/;"	d
ListRightPush	holmes/redis.go	/^func (redisConn *RedisConn) ListRightPush(list, item string) int64 {$/;"	f
Load	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Load(c Conn) error {$/;"	d
Load	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Load(c Conn) error {$/;"	f
LoadConfig	holmes/conf.go	/^func LoadConfig(configPath string) HolmesConfig {$/;"	d
LoadConfig	holmes/conf.go	/^func LoadConfig(configPath string) HolmesConfig {$/;"	f
LoadPattern	holmes/ua_regexp.go	/^func LoadPattern(filename string) []UAParserPattern {$/;"	d
LoadPattern	holmes/ua_regexp.go	/^func LoadPattern(filename string) []UAParserPattern {$/;"	f
LogTimeString	holmes/accesslog.go	/^func (accessLog *AccessLog) LogTimeString() string {$/;"	d
LogTimeString	holmes/accesslog.go	/^func (accessLog *AccessLog) LogTimeString() string {$/;"	f
Message	github.com/garyburd/redigo/redis/pubsub.go	/^type Message struct {$/;"	d
Message	github.com/garyburd/redigo/redis/pubsub.go	/^type Message struct {$/;"	t
MultiBulk	github.com/garyburd/redigo/redis/reply.go	/^func MultiBulk(reply interface{}, err error) ([]interface{}, error) { return Values(reply, err) }$/;"	d
MultiBulk	github.com/garyburd/redigo/redis/reply.go	/^func MultiBulk(reply interface{}, err error) ([]interface{}, error) { return Values(reply, err) }$/;"	f
MyStruct	github.com/garyburd/redigo/redisx/example.go	/^type MyStruct struct {$/;"	d
MyStruct	github.com/garyburd/redigo/redisx/example.go	/^type MyStruct struct {$/;"	t
NO	holmes/filter.go	/^	NO         \/\/ is not a human$/;"	c
NewConn	github.com/garyburd/redigo/redis/conn.go	/^func NewConn(netConn net.Conn, readTimeout, writeTimeout time.Duration) Conn {$/;"	d
NewConn	github.com/garyburd/redigo/redis/conn.go	/^func NewConn(netConn net.Conn, readTimeout, writeTimeout time.Duration) Conn {$/;"	f
NewConnBufio	github.com/garyburd/redigo/redis/test_test.go	/^func NewConnBufio(rw bufio.ReadWriter) Conn {$/;"	d
NewConnBufio	github.com/garyburd/redigo/redis/test_test.go	/^func NewConnBufio(rw bufio.ReadWriter) Conn {$/;"	f
NewLoggingConn	github.com/garyburd/redigo/redis/log.go	/^func NewLoggingConn(conn Conn, logger *log.Logger, prefix string) Conn {$/;"	d
NewLoggingConn	github.com/garyburd/redigo/redis/log.go	/^func NewLoggingConn(conn Conn, logger *log.Logger, prefix string) Conn {$/;"	f
NewPool	github.com/garyburd/redigo/redis/pool.go	/^func NewPool(newFn func() (Conn, error), maxIdle int) *Pool {$/;"	d
NewPool	github.com/garyburd/redigo/redis/pool.go	/^func NewPool(newFn func() (Conn, error), maxIdle int) *Pool {$/;"	f
NewRedisConn	holmes/redis.go	/^func NewRedisConn() RedisConn {$/;"	d
NewRedisConn	holmes/redis.go	/^func NewRedisConn() RedisConn {$/;"	f
NewScript	github.com/garyburd/redigo/redis/script.go	/^func NewScript(keyCount int, src string) *Script {$/;"	d
NewScript	github.com/garyburd/redigo/redis/script.go	/^func NewScript(keyCount int, src string) *Script {$/;"	f
PMessage	github.com/garyburd/redigo/redis/pubsub.go	/^type PMessage struct {$/;"	d
PMessage	github.com/garyburd/redigo/redis/pubsub.go	/^type PMessage struct {$/;"	t
PSubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) PSubscribe(channel ...interface{}) error {$/;"	d
PSubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) PSubscribe(channel ...interface{}) error {$/;"	f
PUnsubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) PUnsubscribe(channel ...interface{}) error {$/;"	d
PUnsubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) PUnsubscribe(channel ...interface{}) error {$/;"	f
Parse	holmes/ua_regexp.go	/^func (uaParser *UAParser) Parse(ua string) string {$/;"	d
Parse	holmes/ua_regexp.go	/^func (uaParser *UAParser) Parse(ua string) string {$/;"	f
Parse	holmes/ua_regexp.go	/^func Parse(ua string) string {$/;"	d
Parse	holmes/ua_regexp.go	/^func Parse(ua string) string {$/;"	f
Pool	github.com/garyburd/redigo/redis/pool.go	/^type Pool struct {$/;"	d
Pool	github.com/garyburd/redigo/redis/pool.go	/^type Pool struct {$/;"	t
PubSubConn	github.com/garyburd/redigo/redis/pubsub.go	/^type PubSubConn struct {$/;"	d
PubSubConn	github.com/garyburd/redigo/redis/pubsub.go	/^type PubSubConn struct {$/;"	t
ReadFilenames	holmes/accesslog.go	/^func ReadFilenames(dirname string) []string {$/;"	d
ReadFilenames	holmes/accesslog.go	/^func ReadFilenames(dirname string) []string {$/;"	f
ReadLogLines	holmes/accesslog.go	/^func ReadLogLines(filename string) []string {$/;"	d
ReadLogLines	holmes/accesslog.go	/^func ReadLogLines(filename string) []string {$/;"	f
Receive	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Receive() (reply interface{}, err error) {$/;"	d
Receive	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Receive() (reply interface{}, err error) {$/;"	f
Receive	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Receive() (interface{}, error) {$/;"	d
Receive	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Receive() (interface{}, error) {$/;"	f
Receive	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Receive() (reply interface{}, err error) {$/;"	d
Receive	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Receive() (reply interface{}, err error) {$/;"	f
Receive	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Receive() (reply interface{}, err error) {$/;"	d
Receive	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Receive() (reply interface{}, err error) {$/;"	f
Receive	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Receive() interface{} {$/;"	d
Receive	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Receive() interface{} {$/;"	f
RedisConf	holmes/redis.go	/^type RedisConf struct {$/;"	d
RedisConf	holmes/redis.go	/^type RedisConf struct {$/;"	t
RedisConn	holmes/redis.go	/^type RedisConn struct {$/;"	d
RedisConn	holmes/redis.go	/^type RedisConn struct {$/;"	t
Result	github.com/garyburd/redigo/redis/reply.go	/^\/\/  Reply type      Result$/;"	d
Result	github.com/garyburd/redigo/redis/reply.go	/^\/\/  Reply type    Result$/;"	d
Scan	github.com/garyburd/redigo/redis/scan.go	/^func Scan(src []interface{}, dest ...interface{}) ([]interface{}, error) {$/;"	d
Scan	github.com/garyburd/redigo/redis/scan.go	/^func Scan(src []interface{}, dest ...interface{}) ([]interface{}, error) {$/;"	f
ScanStruct	github.com/garyburd/redigo/redis/scan.go	/^func ScanStruct(src []interface{}, dest interface{}) error {$/;"	d
ScanStruct	github.com/garyburd/redigo/redis/scan.go	/^func ScanStruct(src []interface{}, dest interface{}) error {$/;"	f
ScanStruct	github.com/garyburd/redigo/redisx/struct.go	/^func ScanStruct(reply interface{}, dst interface{}) error {$/;"	d
ScanStruct	github.com/garyburd/redigo/redisx/struct.go	/^func ScanStruct(reply interface{}, dst interface{}) error {$/;"	f
Script	github.com/garyburd/redigo/redis/script.go	/^type Script struct {$/;"	d
Script	github.com/garyburd/redigo/redis/script.go	/^type Script struct {$/;"	t
Send	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Send(cmd string, args ...interface{}) error {$/;"	d
Send	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) Send(cmd string, args ...interface{}) error {$/;"	f
Send	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Send(commandName string, args ...interface{}) error {$/;"	d
Send	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) Send(commandName string, args ...interface{}) error {$/;"	f
Send	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Send(commandName string, args ...interface{}) error {$/;"	d
Send	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) Send(commandName string, args ...interface{}) error {$/;"	f
Send	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Send(commandName string, args ...interface{}) error {$/;"	d
Send	github.com/garyburd/redigo/redis/pool_test.go	/^func (c *fakeConn) Send(commandName string, args ...interface{}) error {$/;"	f
Send	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Send(c Conn, keysAndArgs ...interface{}) error {$/;"	d
Send	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) Send(c Conn, keysAndArgs ...interface{}) error {$/;"	f
SendHash	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) SendHash(c Conn, keysAndArgs ...interface{}) error {$/;"	d
SendHash	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) SendHash(c Conn, keysAndArgs ...interface{}) error {$/;"	f
SetAdd	holmes/redis.go	/^func (redisConn *RedisConn) SetAdd(set string, member string) int64 {$/;"	d
SetAdd	holmes/redis.go	/^func (redisConn *RedisConn) SetAdd(set string, member string) int64 {$/;"	f
SetIsMember	holmes/redis.go	/^func (redisConn *RedisConn) SetIsMember(set string, member string) int64 {$/;"	d
SetIsMember	holmes/redis.go	/^func (redisConn *RedisConn) SetIsMember(set string, member string) int64 {$/;"	f
StageLog	holmes/stage.go	/^func StageLog(c chan int, holmesConfig *HolmesConfig) {$/;"	d
StageLog	holmes/stage.go	/^func StageLog(c chan int, holmesConfig *HolmesConfig) {$/;"	f
String	github.com/garyburd/redigo/redis/reply.go	/^func String(reply interface{}, err error) (string, error) {$/;"	d
String	github.com/garyburd/redigo/redis/reply.go	/^func String(reply interface{}, err error) (string, error) {$/;"	f
String	holmes/accesslog.go	/^func (accessLog *AccessLog) String() string {$/;"	d
String	holmes/accesslog.go	/^func (accessLog *AccessLog) String() string {$/;"	f
Strings	github.com/garyburd/redigo/redis/reply.go	/^func Strings(reply interface{}, err error) ([]string, error) {$/;"	d
Strings	github.com/garyburd/redigo/redis/reply.go	/^func Strings(reply interface{}, err error) ([]string, error) {$/;"	f
Subscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Subscribe(channel ...interface{}) error {$/;"	d
Subscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Subscribe(channel ...interface{}) error {$/;"	f
Subscription	github.com/garyburd/redigo/redis/pubsub.go	/^type Subscription struct {$/;"	d
Subscription	github.com/garyburd/redigo/redis/pubsub.go	/^type Subscription struct {$/;"	t
TestArgs	github.com/garyburd/redigo/redis/scan_test.go	/^func TestArgs(t *testing.T) {$/;"	d
TestArgs	github.com/garyburd/redigo/redis/scan_test.go	/^func TestArgs(t *testing.T) {$/;"	f
TestBlankCommmand	github.com/garyburd/redigo/redis/conn_test.go	/^func TestBlankCommmand(t *testing.T) {$/;"	d
TestBlankCommmand	github.com/garyburd/redigo/redis/conn_test.go	/^func TestBlankCommmand(t *testing.T) {$/;"	f
TestBlockListRightPop	holmes/redis_test.go	/^func TestBlockListRightPop(t *testing.T) {$/;"	d
TestBlockListRightPop	holmes/redis_test.go	/^func TestBlockListRightPop(t *testing.T) {$/;"	f
TestBorrowCheck	github.com/garyburd/redigo/redis/pool_test.go	/^func TestBorrowCheck(t *testing.T) {$/;"	d
TestBorrowCheck	github.com/garyburd/redigo/redis/pool_test.go	/^func TestBorrowCheck(t *testing.T) {$/;"	f
TestDoCommands	github.com/garyburd/redigo/redis/conn_test.go	/^func TestDoCommands(t *testing.T) {$/;"	d
TestDoCommands	github.com/garyburd/redigo/redis/conn_test.go	/^func TestDoCommands(t *testing.T) {$/;"	f
TestError	github.com/garyburd/redigo/redis/conn_test.go	/^func TestError(t *testing.T) {$/;"	d
TestError	github.com/garyburd/redigo/redis/conn_test.go	/^func TestError(t *testing.T) {$/;"	f
TestFormatStruct	github.com/garyburd/redigo/redisx/struct_test.go	/^func TestFormatStruct(t *testing.T) {$/;"	d
TestFormatStruct	github.com/garyburd/redigo/redisx/struct_test.go	/^func TestFormatStruct(t *testing.T) {$/;"	f
TestListLeftPush	holmes/redis_test.go	/^func TestListLeftPush(t *testing.T) {$/;"	d
TestListLeftPush	holmes/redis_test.go	/^func TestListLeftPush(t *testing.T) {$/;"	f
TestMaxActive	github.com/garyburd/redigo/redis/pool_test.go	/^func TestMaxActive(t *testing.T) {$/;"	d
TestMaxActive	github.com/garyburd/redigo/redis/pool_test.go	/^func TestMaxActive(t *testing.T) {$/;"	f
TestPipelineCommands	github.com/garyburd/redigo/redis/conn_test.go	/^func TestPipelineCommands(t *testing.T) {$/;"	d
TestPipelineCommands	github.com/garyburd/redigo/redis/conn_test.go	/^func TestPipelineCommands(t *testing.T) {$/;"	f
TestPoolClose	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolClose(t *testing.T) {$/;"	d
TestPoolClose	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolClose(t *testing.T) {$/;"	f
TestPoolError	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolError(t *testing.T) {$/;"	d
TestPoolError	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolError(t *testing.T) {$/;"	f
TestPoolMaxIdle	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolMaxIdle(t *testing.T) {$/;"	d
TestPoolMaxIdle	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolMaxIdle(t *testing.T) {$/;"	f
TestPoolReuse	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolReuse(t *testing.T) {$/;"	d
TestPoolReuse	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolReuse(t *testing.T) {$/;"	f
TestPoolTimeout	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolTimeout(t *testing.T) {$/;"	d
TestPoolTimeout	github.com/garyburd/redigo/redis/pool_test.go	/^func TestPoolTimeout(t *testing.T) {$/;"	f
TestPushed	github.com/garyburd/redigo/redis/pubsub_test.go	/^func TestPushed(t *testing.T) {$/;"	d
TestPushed	github.com/garyburd/redigo/redis/pubsub_test.go	/^func TestPushed(t *testing.T) {$/;"	f
TestRead	github.com/garyburd/redigo/redis/conn_test.go	/^func TestRead(t *testing.T) {$/;"	d
TestRead	github.com/garyburd/redigo/redis/conn_test.go	/^func TestRead(t *testing.T) {$/;"	f
TestReadDeadline	github.com/garyburd/redigo/redis/conn_test.go	/^func TestReadDeadline(t *testing.T) {$/;"	d
TestReadDeadline	github.com/garyburd/redigo/redis/conn_test.go	/^func TestReadDeadline(t *testing.T) {$/;"	f
TestReply	github.com/garyburd/redigo/redis/reply_test.go	/^func TestReply(t *testing.T) {$/;"	d
TestReply	github.com/garyburd/redigo/redis/reply_test.go	/^func TestReply(t *testing.T) {$/;"	f
TestRequestTimeString	holmes/accesslog_test.go	/^func TestRequestTimeString(t *testing.T) {$/;"	d
TestRequestTimeString	holmes/accesslog_test.go	/^func TestRequestTimeString(t *testing.T) {$/;"	f
TestScanConversion	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanConversion(t *testing.T) {$/;"	d
TestScanConversion	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanConversion(t *testing.T) {$/;"	f
TestScanConversionError	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanConversionError(t *testing.T) {$/;"	d
TestScanConversionError	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanConversionError(t *testing.T) {$/;"	f
TestScanStruct	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanStruct(t *testing.T) {$/;"	d
TestScanStruct	github.com/garyburd/redigo/redis/scan_test.go	/^func TestScanStruct(t *testing.T) {$/;"	f
TestScanStruct	github.com/garyburd/redigo/redisx/struct_test.go	/^func TestScanStruct(t *testing.T) {$/;"	d
TestScanStruct	github.com/garyburd/redigo/redisx/struct_test.go	/^func TestScanStruct(t *testing.T) {$/;"	f
TestScript	github.com/garyburd/redigo/redis/script_test.go	/^func TestScript(t *testing.T) {$/;"	d
TestScript	github.com/garyburd/redigo/redis/script_test.go	/^func TestScript(t *testing.T) {$/;"	f
TestString	holmes/accesslog_test.go	/^func TestString(t *testing.T) {$/;"	d
TestString	holmes/accesslog_test.go	/^func TestString(t *testing.T) {$/;"	f
TestWrite	github.com/garyburd/redigo/redis/conn_test.go	/^func TestWrite(t *testing.T) {$/;"	d
TestWrite	github.com/garyburd/redigo/redis/conn_test.go	/^func TestWrite(t *testing.T) {$/;"	f
UAParser	holmes/ua_regexp.go	/^type UAParser struct {$/;"	d
UAParser	holmes/ua_regexp.go	/^type UAParser struct {$/;"	t
UAParserPattern	holmes/ua_regexp.go	/^type UAParserPattern struct { \/\/ UA is stand for User Agent$/;"	d
UAParserPattern	holmes/ua_regexp.go	/^type UAParserPattern struct { \/\/ UA is stand for User Agent$/;"	t
UAParsers	holmes/ua_regexp.go	/^var UAParsers = []UAParser{}$/;"	d
UAParsers	holmes/ua_regexp.go	/^var UAParsers = []UAParser{}$/;"	v
UNKNOWN	holmes/filter.go	/^	UNKNOWN$/;"	c
URIFilter	holmes/filter.go	/^func URIFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
URIFilter	holmes/filter.go	/^func URIFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	f
Unsubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Unsubscribe(channel ...interface{}) error {$/;"	d
Unsubscribe	github.com/garyburd/redigo/redis/pubsub.go	/^func (c PubSubConn) Unsubscribe(channel ...interface{}) error {$/;"	f
UserAgentFilter	holmes/filter.go	/^func UserAgentFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
UserAgentFilter	holmes/filter.go	/^func UserAgentFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	f
Values	github.com/garyburd/redigo/redis/reply.go	/^func Values(reply interface{}, err error) ([]interface{}, error) {$/;"	d
Values	github.com/garyburd/redigo/redis/reply.go	/^func Values(reply interface{}, err error) ([]interface{}, error) {$/;"	f
WhiteIpFilter	holmes/filter.go	/^func WhiteIpFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	d
WhiteIpFilter	holmes/filter.go	/^func WhiteIpFilter(redisConn RedisConn, accesslog AccessLog) int {$/;"	f
YES	holmes/filter.go	/^	YES = iota \/\/ is a human$/;"	c
accessLog	holmes/accesslog.go	/^	var accessLog AccessLog$/;"	d
accessLog	holmes/accesslog_test.go	/^	var accessLog AccessLog$/;"	d
accesslog	holmes/accesslog_test.go	/^	var accesslog AccessLog$/;"	d
accesslog	holmes/filter.go	/^	var accesslog AccessLog$/;"	d
accesslogLine	holmes/filter.go	/^	var accesslogLine string$/;"	d
args	github.com/garyburd/redigo/redis/script.go	/^	var args []interface{}$/;"	d
args	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) args(spec string, keysAndArgs []interface{}) []interface{} {$/;"	d
args	github.com/garyburd/redigo/redis/script.go	/^func (s *Script) args(spec string, keysAndArgs []interface{}) []interface{} {$/;"	f
argsTests	github.com/garyburd/redigo/redis/scan_test.go	/^var argsTests = []struct {$/;"	d
argsTests	github.com/garyburd/redigo/redis/scan_test.go	/^var argsTests = []struct {$/;"	v
buf	github.com/garyburd/redigo/redis/conn.go	/^			var buf bytes.Buffer$/;"	d
buf	github.com/garyburd/redigo/redis/conn_test.go	/^		var buf bytes.Buffer$/;"	d
buf	github.com/garyburd/redigo/redis/log.go	/^	var buf bytes.Buffer$/;"	d
cannotConvert	github.com/garyburd/redigo/redis/scan.go	/^func cannotConvert(d reflect.Value, s interface{}) error {$/;"	d
cannotConvert	github.com/garyburd/redigo/redis/scan.go	/^func cannotConvert(d reflect.Value, s interface{}) error {$/;"	f
check	github.com/garyburd/redigo/redis/pool_test.go	/^func (d *dialer) check(message string, p *Pool, dialed, open int) {$/;"	d
check	github.com/garyburd/redigo/redis/pool_test.go	/^func (d *dialer) check(message string, p *Pool, dialed, open int) {$/;"	f
compileStructSpec	github.com/garyburd/redigo/redis/scan.go	/^func compileStructSpec(t reflect.Type, depth map[string]int, index []int, ss *structSpec) {$/;"	d
compileStructSpec	github.com/garyburd/redigo/redis/scan.go	/^func compileStructSpec(t reflect.Type, depth map[string]int, index []int, ss *structSpec) {$/;"	f
compileStructSpec	github.com/garyburd/redigo/redisx/util.go	/^func compileStructSpec(t reflect.Type, depth map[string]int, index []int, ss *structSpec) {$/;"	d
compileStructSpec	github.com/garyburd/redigo/redisx/util.go	/^func compileStructSpec(t reflect.Type, depth map[string]int, index []int, ss *structSpec) {$/;"	f
conn	github.com/garyburd/redigo/redis/conn.go	/^type conn struct {$/;"	d
conn	github.com/garyburd/redigo/redis/conn.go	/^type conn struct {$/;"	t
content	holmes/conf.go	/^		var content string$/;"	d
content	holmes/ua_regexp.go	/^	var content string$/;"	d
conversion	github.com/garyburd/redigo/redis/doc.go	/^\/\/      \/\/ handle error return from c.Do or type conversion error.$/;"	d
convertAssign	github.com/garyburd/redigo/redis/scan.go	/^func convertAssign(d interface{}, s interface{}) (err error) {$/;"	d
convertAssign	github.com/garyburd/redigo/redis/scan.go	/^func convertAssign(d interface{}, s interface{}) (err error) {$/;"	f
convertAssignBytes	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignBytes(d reflect.Value, s []byte) (err error) {$/;"	d
convertAssignBytes	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignBytes(d reflect.Value, s []byte) (err error) {$/;"	f
convertAssignInt	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignInt(d reflect.Value, s int64) (err error) {$/;"	d
convertAssignInt	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignInt(d reflect.Value, s int64) (err error) {$/;"	f
convertAssignValues	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignValues(d reflect.Value, s []interface{}) (err error) {$/;"	d
convertAssignValues	github.com/garyburd/redigo/redis/scan.go	/^func convertAssignValues(d reflect.Value, s []interface{}) (err error) {$/;"	f
defaultFieldSpec	github.com/garyburd/redigo/redis/scan.go	/^	defaultFieldSpec = &fieldSpec{}$/;"	v
defaultFieldSpec	github.com/garyburd/redigo/redisx/util.go	/^	defaultFieldSpec = &fieldSpec{}$/;"	v
dial	github.com/garyburd/redigo/redis/conn_test.go	/^func dial() (redis.Conn, error) {$/;"	d
dial	github.com/garyburd/redigo/redis/conn_test.go	/^func dial() (redis.Conn, error) {$/;"	f
dial	github.com/garyburd/redigo/redis/pool_test.go	/^func (d *dialer) dial() (Conn, error) {$/;"	d
dial	github.com/garyburd/redigo/redis/pool_test.go	/^func (d *dialer) dial() (Conn, error) {$/;"	f
dialer	github.com/garyburd/redigo/redis/pool_test.go	/^type dialer struct {$/;"	d
dialer	github.com/garyburd/redigo/redis/pool_test.go	/^type dialer struct {$/;"	t
dialt	github.com/garyburd/redigo/redis/conn_test.go	/^func dialt(t *testing.T) redis.Conn {$/;"	d
dialt	github.com/garyburd/redigo/redis/conn_test.go	/^func dialt(t *testing.T) redis.Conn {$/;"	f
dummyClose	github.com/garyburd/redigo/redis/test_test.go	/^type dummyClose struct{ net.Conn }$/;"	d
dummyClose	github.com/garyburd/redigo/redis/test_test.go	/^type dummyClose struct{ net.Conn }$/;"	t
err	github.com/garyburd/redigo/redis/conn.go	/^	var err error$/;"	d
err	github.com/garyburd/redigo/redis/scan.go	/^		var err error$/;"	d
err	github.com/garyburd/redigo/redis/scan.go	/^	var err error$/;"	d
errPoolClosed	github.com/garyburd/redigo/redis/pool.go	/^var errPoolClosed = errors.New("redigo: connection pool closed")$/;"	d
errPoolClosed	github.com/garyburd/redigo/redis/pool.go	/^var errPoolClosed = errors.New("redigo: connection pool closed")$/;"	v
error	github.com/garyburd/redigo/redis/doc.go	/^\/\/ type error.  If the error is non-nil, then the helper function returns the$/;"	d
errorSentinel	github.com/garyburd/redigo/redis/conn_test.go	/^var errorSentinel = &struct{}{}$/;"	d
errorSentinel	github.com/garyburd/redigo/redis/conn_test.go	/^var errorSentinel = &struct{}{}$/;"	v
expectPushed	github.com/garyburd/redigo/redis/pubsub_test.go	/^func expectPushed(t *testing.T, c redis.PubSubConn, message string, expected interface{}) {$/;"	d
expectPushed	github.com/garyburd/redigo/redis/pubsub_test.go	/^func expectPushed(t *testing.T, c redis.PubSubConn, message string, expected interface{}) {$/;"	f
fakeConn	github.com/garyburd/redigo/redis/pool_test.go	/^type fakeConn struct {$/;"	d
fakeConn	github.com/garyburd/redigo/redis/pool_test.go	/^type fakeConn struct {$/;"	t
fatal	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) fatal(err error) error {$/;"	d
fatal	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) fatal(err error) error {$/;"	f
fieldSpec	github.com/garyburd/redigo/redis/scan.go	/^func (ss *structSpec) fieldSpec(name []byte) *fieldSpec {$/;"	d
fieldSpec	github.com/garyburd/redigo/redis/scan.go	/^func (ss *structSpec) fieldSpec(name []byte) *fieldSpec {$/;"	f
fieldSpec	github.com/garyburd/redigo/redis/scan.go	/^type fieldSpec struct {$/;"	d
fieldSpec	github.com/garyburd/redigo/redis/scan.go	/^type fieldSpec struct {$/;"	t
fieldSpec	github.com/garyburd/redigo/redisx/util.go	/^func (ss *structSpec) fieldSpec(name []byte) *fieldSpec {$/;"	d
fieldSpec	github.com/garyburd/redigo/redisx/util.go	/^func (ss *structSpec) fieldSpec(name []byte) *fieldSpec {$/;"	f
fieldSpec	github.com/garyburd/redigo/redisx/util.go	/^type fieldSpec struct {$/;"	d
fieldSpec	github.com/garyburd/redigo/redisx/util.go	/^type fieldSpec struct {$/;"	t
filterResult	holmes/filter.go	/^	var filterResult int$/;"	d
flattenStruct	github.com/garyburd/redigo/redis/scan.go	/^func flattenStruct(args Args, v reflect.Value) Args {$/;"	d
flattenStruct	github.com/garyburd/redigo/redis/scan.go	/^func flattenStruct(args Args, v reflect.Value) Args {$/;"	f
for	github.com/garyburd/redigo/redis/doc.go	/^\/\/ interface{} to the specific Go type for the command result.$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^				return nil, fmt.Errorf("redigo: unexpected element type for Strings, got type %T", reply[i])$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return "", fmt.Errorf("redigo: unexpected type for String, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return 0, fmt.Errorf("redigo: unexpected type for Float64, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return 0, fmt.Errorf("redigo: unexpected type for Int, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return 0, fmt.Errorf("redigo: unexpected type for Int64, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return false, fmt.Errorf("redigo: unexpected type for Bool, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return nil, fmt.Errorf("redigo: unexpected type for Bytes, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return nil, fmt.Errorf("redigo: unexpected type for Strings, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redis/reply.go	/^	return nil, fmt.Errorf("redigo: unexpected type for Values, got type %T", reply)$/;"	d
for	github.com/garyburd/redigo/redisx/struct.go	/^				panic("redigo: unsuported type for field " + string(name))$/;"	d
for	github.com/garyburd/redigo/redisx/struct.go	/^			panic("redigo: unsuported type for field " + string(name))$/;"	d
formatStructTests	github.com/garyburd/redigo/redisx/struct_test.go	/^var formatStructTests = []struct {$/;"	d
formatStructTests	github.com/garyburd/redigo/redisx/struct_test.go	/^var formatStructTests = []struct {$/;"	v
from	holmes/filter.go	/^	\/\/\/\/\/\/\/\/\/\/\/\/ get UA type from website$/;"	d
get	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) get() error {$/;"	d
get	github.com/garyburd/redigo/redis/pool.go	/^func (c *pooledConnection) get() error {$/;"	f
get	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) get() (Conn, error) {$/;"	d
get	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) get() (Conn, error) {$/;"	f
getScript	github.com/garyburd/redigo/redis/script_test.go	/^	var getScript = redis.NewScript(1, `return redis.call('get', KEYS[1])`)$/;"	d
holmesConf	holmes/main.go	/^var holmesConf HolmesConfig$/;"	d
holmesConf	holmes/main.go	/^var holmesConf HolmesConfig$/;"	v
holmesConfig	holmes/conf.go	/^	var holmesConfig HolmesConfig$/;"	d
idleConn	github.com/garyburd/redigo/redis/pool.go	/^type idleConn struct {$/;"	d
idleConn	github.com/garyburd/redigo/redis/pool.go	/^type idleConn struct {$/;"	t
init	holmes/main.go	/^func init() {$/;"	d
init	holmes/main.go	/^func init() {$/;"	f
init	holmes/redis_test.go	/^func init() {$/;"	d
init	holmes/redis_test.go	/^func init() {$/;"	f
kind	github.com/garyburd/redigo/redis/pubsub.go	/^	var kind string$/;"	d
loggingConn	github.com/garyburd/redigo/redis/log.go	/^type loggingConn struct {$/;"	d
loggingConn	github.com/garyburd/redigo/redis/log.go	/^type loggingConn struct {$/;"	t
main	github.com/garyburd/redigo/redisx/example.go	/^func main() {$/;"	d
main	github.com/garyburd/redigo/redisx/example.go	/^func main() {$/;"	f
main	github.com/garyburd/redigo/redisx/example.go	/^package main$/;"	p
main	holmes/accesslog.go	/^package main$/;"	p
main	holmes/accesslog_test.go	/^package main$/;"	p
main	holmes/conf.go	/^package main$/;"	p
main	holmes/exporter.go	/^package main$/;"	p
main	holmes/filter.go	/^package main$/;"	p
main	holmes/main.go	/^func main() {$/;"	d
main	holmes/main.go	/^package main$/;"	p
main	holmes/redis.go	/^package main$/;"	p
main	holmes/redis_test.go	/^package main$/;"	p
main	holmes/stage.go	/^package main$/;"	p
main	holmes/ua_regexp.go	/^package main$/;"	p
negate	github.com/garyburd/redigo/redis/conn.go	/^	var negate bool$/;"	d
nowFunc	github.com/garyburd/redigo/redis/pool.go	/^var nowFunc = time.Now \/\/ for testing$/;"	d
nowFunc	github.com/garyburd/redigo/redis/pool.go	/^var nowFunc = time.Now \/\/ for testing$/;"	v
of	holmes/redis.go	/^\/\/     1)list name type of string;$/;"	d
of	holmes/redis.go	/^\/\/     2)timeout second type of int64$/;"	d
okReply	github.com/garyburd/redigo/redis/conn.go	/^	okReply   interface{} = "OK"$/;"	v
p1	github.com/garyburd/redigo/redis/scan_test.go	/^	var p1, p2 struct {$/;"	d
parseInt	github.com/garyburd/redigo/redis/conn.go	/^func parseInt(p []byte) (interface{}, error) {$/;"	d
parseInt	github.com/garyburd/redigo/redis/conn.go	/^func parseInt(p []byte) (interface{}, error) {$/;"	f
parseLen	github.com/garyburd/redigo/redis/conn.go	/^func parseLen(p []byte) (int, error) {$/;"	d
parseLen	github.com/garyburd/redigo/redis/conn.go	/^func parseLen(p []byte) (int, error) {$/;"	f
password	github.com/garyburd/redigo/redis/pool.go	/^\/\/      var password string$/;"	d
pm	github.com/garyburd/redigo/redis/pubsub.go	/^		var pm PMessage$/;"	d
pongReply	github.com/garyburd/redigo/redis/conn.go	/^	pongReply interface{} = "PONG"$/;"	v
pooledConnection	github.com/garyburd/redigo/redis/pool.go	/^type pooledConnection struct {$/;"	d
pooledConnection	github.com/garyburd/redigo/redis/pool.go	/^type pooledConnection struct {$/;"	t
print	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) print(method, commandName string, args []interface{}, reply interface{}, err error) {$/;"	d
print	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) print(method, commandName string, args []interface{}, reply interface{}, err error) {$/;"	f
printValue	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) printValue(buf *bytes.Buffer, v interface{}) {$/;"	d
printValue	github.com/garyburd/redigo/redis/log.go	/^func (c *loggingConn) printValue(buf *bytes.Buffer, v interface{}) {$/;"	f
publish	github.com/garyburd/redigo/redis/pubsub_test.go	/^func publish(channel, value interface{}) {$/;"	d
publish	github.com/garyburd/redigo/redis/pubsub_test.go	/^func publish(channel, value interface{}) {$/;"	f
put	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) put(c Conn) error {$/;"	d
put	github.com/garyburd/redigo/redis/pool.go	/^func (p *Pool) put(c Conn) error {$/;"	f
readLine	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) readLine() ([]byte, error) {$/;"	d
readLine	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) readLine() ([]byte, error) {$/;"	f
readReply	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) readReply() (interface{}, error) {$/;"	d
readReply	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) readReply() (interface{}, error) {$/;"	f
readTests	github.com/garyburd/redigo/redis/conn_test.go	/^var readTests = []struct {$/;"	d
readTests	github.com/garyburd/redigo/redis/conn_test.go	/^var readTests = []struct {$/;"	v
redis	github.com/garyburd/redigo/redis/conn.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/doc.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/log.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/pool.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/pool_test.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/pubsub.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/redis.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/reply.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/scan.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/script.go	/^package redis$/;"	p
redis	github.com/garyburd/redigo/redis/test_test.go	/^package redis$/;"	p
redisConf	holmes/redis.go	/^var redisConf RedisConf$/;"	d
redisConf	holmes/redis.go	/^var redisConf RedisConf$/;"	v
redisConn	holmes/redis.go	/^	var redisConn RedisConn$/;"	d
redis_test	github.com/garyburd/redigo/redis/conn_test.go	/^package redis_test$/;"	p
redis_test	github.com/garyburd/redigo/redis/pubsub_test.go	/^package redis_test$/;"	p
redis_test	github.com/garyburd/redigo/redis/reply_test.go	/^package redis_test$/;"	p
redis_test	github.com/garyburd/redigo/redis/scan_test.go	/^package redis_test$/;"	p
redis_test	github.com/garyburd/redigo/redis/script_test.go	/^package redis_test$/;"	p
redis_test	github.com/garyburd/redigo/redis/zpop_example_test.go	/^package redis_test$/;"	p
redisx	github.com/garyburd/redigo/redisx/doc.go	/^package redisx$/;"	p
redisx	github.com/garyburd/redigo/redisx/struct.go	/^package redisx$/;"	p
redisx	github.com/garyburd/redigo/redisx/util.go	/^package redisx$/;"	p
redisx_test	github.com/garyburd/redigo/redisx/struct_test.go	/^package redisx_test$/;"	p
reply	github.com/garyburd/redigo/redis/conn.go	/^	var reply interface{}$/;"	d
reply	github.com/garyburd/redigo/redis/scan_test.go	/^		var reply []interface{}$/;"	d
reply	github.com/garyburd/redigo/redisx/struct_test.go	/^		var reply []interface{}$/;"	d
replyTests	github.com/garyburd/redigo/redis/reply_test.go	/^var replyTests = []struct {$/;"	d
replyTests	github.com/garyburd/redigo/redis/reply_test.go	/^var replyTests = []struct {$/;"	v
result	holmes/redis.go	/^	var result int64$/;"	d
result	holmes/redis.go	/^	var result string$/;"	d
returned	github.com/garyburd/redigo/redis/doc.go	/^\/\/ type returned for each command. Use type assertions to convert from$/;"	d
s0	github.com/garyburd/redigo/redis/scan_test.go	/^type s0 struct {$/;"	d
s0	github.com/garyburd/redigo/redis/scan_test.go	/^type s0 struct {$/;"	t
s1	github.com/garyburd/redigo/redis/scan_test.go	/^type s1 struct {$/;"	d
s1	github.com/garyburd/redigo/redis/scan_test.go	/^type s1 struct {$/;"	t
scanConversionErrorTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanConversionErrorTests = []struct {$/;"	d
scanConversionErrorTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanConversionErrorTests = []struct {$/;"	v
scanConversionTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanConversionTests = []struct {$/;"	d
scanConversionTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanConversionTests = []struct {$/;"	v
scanStructTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanStructTests = []struct {$/;"	d
scanStructTests	github.com/garyburd/redigo/redis/scan_test.go	/^var scanStructTests = []struct {$/;"	v
scanStructTests	github.com/garyburd/redigo/redisx/struct_test.go	/^var scanStructTests = []struct {$/;"	d
scanStructTests	github.com/garyburd/redigo/redisx/struct_test.go	/^var scanStructTests = []struct {$/;"	v
server	github.com/garyburd/redigo/redis/pool.go	/^\/\/      var server string           \/\/ host:port of server$/;"	d
string	github.com/garyburd/redigo/redis/doc.go	/^\/\/ Arguments of type string and []byte are sent to the server as is. The value$/;"	d
structSpec	github.com/garyburd/redigo/redis/scan.go	/^type structSpec struct {$/;"	d
structSpec	github.com/garyburd/redigo/redis/scan.go	/^type structSpec struct {$/;"	t
structSpec	github.com/garyburd/redigo/redisx/util.go	/^type structSpec struct {$/;"	d
structSpec	github.com/garyburd/redigo/redisx/util.go	/^type structSpec struct {$/;"	t
structSpecCache	github.com/garyburd/redigo/redis/scan.go	/^	structSpecCache  = make(map[reflect.Type]*structSpec)$/;"	v
structSpecCache	github.com/garyburd/redigo/redisx/util.go	/^	structSpecCache  = make(map[reflect.Type]*structSpec)$/;"	v
structSpecForType	github.com/garyburd/redigo/redis/scan.go	/^func structSpecForType(t reflect.Type) *structSpec {$/;"	d
structSpecForType	github.com/garyburd/redigo/redis/scan.go	/^func structSpecForType(t reflect.Type) *structSpec {$/;"	f
structSpecForType	github.com/garyburd/redigo/redisx/util.go	/^func structSpecForType(t reflect.Type) *structSpec {$/;"	d
structSpecForType	github.com/garyburd/redigo/redisx/util.go	/^func structSpecForType(t reflect.Type) *structSpec {$/;"	f
structSpecMutex	github.com/garyburd/redigo/redis/scan.go	/^	structSpecMutex  sync.RWMutex$/;"	v
structSpecMutex	github.com/garyburd/redigo/redisx/util.go	/^	structSpecMutex  sync.RWMutex$/;"	v
switch	github.com/garyburd/redigo/redis/doc.go	/^\/\/ converts a pushed message to convenient types for use in a type switch.$/;"	d
switch	github.com/garyburd/redigo/redis/pubsub.go	/^\/\/ error. The return value is intended to be used directly in a type switch as$/;"	d
switches	github.com/garyburd/redigo/redis/scan.go	/^	\/\/ Handle the most common destination types using type switches and$/;"	d
testCommands	github.com/garyburd/redigo/redis/conn_test.go	/^var testCommands = []struct {$/;"	d
testCommands	github.com/garyburd/redigo/redis/conn_test.go	/^var testCommands = []struct {$/;"	v
testConn	github.com/garyburd/redigo/redis/conn_test.go	/^type testConn struct {$/;"	d
testConn	github.com/garyburd/redigo/redis/conn_test.go	/^type testConn struct {$/;"	t
title	github.com/garyburd/redigo/redis/scan_test.go	/^		var title string$/;"	d
uaFamily	holmes/ua_regexp.go	/^	var uaFamily string$/;"	d
userAgentParserPatterns	holmes/ua_regexp.go	/^	var userAgentParserPatterns []UAParserPattern$/;"	d
value1	github.com/garyburd/redigo/redis/doc.go	/^\/\/  var value1 int$/;"	d
value2	github.com/garyburd/redigo/redis/doc.go	/^\/\/  var value2 string$/;"	d
valueError	github.com/garyburd/redigo/redis/reply_test.go	/^type valueError struct {$/;"	d
valueError	github.com/garyburd/redigo/redis/reply_test.go	/^type valueError struct {$/;"	t
ve	github.com/garyburd/redigo/redis/reply_test.go	/^func ve(v interface{}, err error) valueError {$/;"	d
ve	github.com/garyburd/redigo/redis/reply_test.go	/^func ve(v interface{}, err error) valueError {$/;"	f
wg	github.com/garyburd/redigo/redis/pubsub_test.go	/^	var wg sync.WaitGroup$/;"	d
wraps	github.com/garyburd/redigo/redis/doc.go	/^\/\/ The PubSubConn type wraps a Conn with convenience methods for implementing$/;"	d
writeBytes	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeBytes(p []byte) error {$/;"	d
writeBytes	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeBytes(p []byte) error {$/;"	f
writeCommand	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeCommand(cmd string, args []interface{}) (err error) {$/;"	d
writeCommand	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeCommand(cmd string, args []interface{}) (err error) {$/;"	f
writeFloat64	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeFloat64(n float64) error {$/;"	d
writeFloat64	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeFloat64(n float64) error {$/;"	f
writeInt64	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeInt64(n int64) error {$/;"	d
writeInt64	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeInt64(n int64) error {$/;"	f
writeLen	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeLen(prefix byte, n int) error {$/;"	d
writeLen	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeLen(prefix byte, n int) error {$/;"	f
writeString	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeString(s string) error {$/;"	d
writeString	github.com/garyburd/redigo/redis/conn.go	/^func (c *conn) writeString(s string) error {$/;"	f
writeTests	github.com/garyburd/redigo/redis/conn_test.go	/^var writeTests = []struct {$/;"	d
writeTests	github.com/garyburd/redigo/redis/conn_test.go	/^var writeTests = []struct {$/;"	v
zpop	github.com/garyburd/redigo/redis/zpop_example_test.go	/^func zpop(c redis.Conn, key string) (result string, err error) {$/;"	d
zpop	github.com/garyburd/redigo/redis/zpop_example_test.go	/^func zpop(c redis.Conn, key string) (result string, err error) {$/;"	f
zpopScript	github.com/garyburd/redigo/redis/zpop_example_test.go	/^var zpopScript = redis.NewScript(1, `$/;"	d
zpopScript	github.com/garyburd/redigo/redis/zpop_example_test.go	/^var zpopScript = redis.NewScript(1, `$/;"	v
